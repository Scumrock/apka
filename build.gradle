plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
	id 'com.gorylenko.gradle-git-properties' version "${gitPropertiesPluginVersion}"
	id 'org.openapi.generator' version "${openapiPluginVersion}"
	id 'com.github.node-gradle.node' version "${gradleNodePluginVersion}"
	id 'org.liquibase.gradle' version "${liquibasePluginVersion}"
	id 'org.sonarqube' version "${sonarqubePluginVersion}"
	id "io.spring.nohttp" version "${noHttpCheckstyleVersion}"
	id 'com.github.andygoossens.gradle-modernizer-plugin' version "${modernizerPluginVersion}"
	id 'checkstyle'
	id 'jacoco'
	id 'java'
}

group = 'ru.tversu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	flatDir {
		dirs 'libs'
	}
}

if (!project.hasProperty("runList")) {
	project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/db/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

if (!project.hasProperty("targetUrl")) {
	project.ext.targetUrl = "jdbc:postgresql://localhost:5432/apka"
}
if (!project.hasProperty("targetUsername")) {
	project.ext.targetUsername = "apka"
}
if (!project.hasProperty("targetPassword")) {
	project.ext.targetPassword = "apka"
}
if (!project.hasProperty("referenceUrl")) {
	project.ext.referenceUrl = "hibernate:spring:ru.tversu.apka.model?dialect=org.hibernate.dialect.PostgreSQL10Dialect&hibernate.show_sql=true&hibernate.enhanced_id=true&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
}

liquibase {
	activities {
		main {
			driver "org.postgresql.Driver"
			url project.ext.targetUrl
			username project.ext.targetUsername
			password project.ext.targetPassword
			changeLogFile "db/changelog/db.changelog-master.xml"
			defaultSchemaName ""
			classpath "${project.projectDir}/src/main/resources/"
			logLevel "debug"
		}
		diffLog {
			driver "org.postgresql.Driver"
			url project.ext.targetUrl
			username project.ext.targetUsername
			password project.ext.targetPassword
			changeLogFile project.ext.diffChangelogFile
			referenceUrl project.ext.referenceUrl
			defaultSchemaName ""
			logLevel "debug"
			classpath "$buildDir/classes/java/main"
			excludeObjects "oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token"
		}
	}

	runList = project.ext.runList
}

configurations {
	providedRuntime
	implementation.exclude module: "spring-boot-starter-tomcat"
	all {
		resolutionStrategy {
			// Inherited version from Spring Boot can't be used because of regressions:
			// To be removed as soon as spring-boot use the same version
			force "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
		}
	}
}

dependencies {
	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"
	testCompileOnly "org.projectlombok:lombok"
	testAnnotationProcessor "org.projectlombok:lombok"

	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	// Spring Boot Libraries
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-jdbc"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-undertow"

	implementation "org.liquibase:liquibase-core:${liquibaseHibernate5Version}"
	liquibaseRuntime "org.liquibase:liquibase-core:${liquibaseHibernate5Version}"

	implementation "io.minio:minio:${minioSdkVersion}"
	implementation "com.jlefebure:spring-boot-starter-minio:${springBootStarterMinioVersion}"

	implementation "org.springframework.boot:spring-boot-properties-migrator"
	runtimeOnly "org.springframework.boot:spring-boot-devtools"

	// OpenAPI 2.0
	implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"

	// Connection pooling, postgresql, hibernate libraries
	implementation("com.zaxxer:HikariCP")
	implementation "org.postgresql:postgresql"
	implementation "org.hibernate:hibernate-core"
	implementation "org.hibernate.validator:hibernate-validator"
	annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"

	// Jackson
	implementation "com.fasterxml.jackson.core:jackson-annotations"
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation "com.fasterxml.jackson.core:jackson-core"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda"
	implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"

	implementation 'org.aspectj:aspectjweaver'
	implementation 'org.aspectj:aspectjrt'
	implementation 'org.slf4j:slf4j-api'
	implementation 'org.slf4j:jcl-over-slf4j'
	implementation 'ch.qos.logback:logback-classic'
	implementation 'ch.qos.logback:logback-core'

	implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
	implementation "commons-io:commons-io:${commonsIoVersion}"
	implementation "org.zalando:problem-spring-web:0.27.0"
	implementation "org.apache.tika:tika-core:${tikaVersion}"
	implementation "com.drewnoakes:metadata-extractor:2.18.0"

	liquibaseRuntime sourceSets.main.compileClasspath
	liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibaseHibernate5Version}"
	liquibaseRuntime "info.picocli:picocli:4.7.0"
	liquibaseRuntime "org.postgresql:postgresql"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "com.h2database:h2"
}

tasks.named('test') {
	useJUnitPlatform()
}

compileJava.dependsOn(processResources)
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// set up jacoco coverage rules
jacocoTestCoverageVerification {
	executionData test
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}

// set up jacoco coverate metrics
jacocoTestReport {
	executionData test
}

build.dependsOn jacocoTestCoverageVerification, jacocoTestReport

wrapper {
	gradleVersion = "7.5"
}

defaultTasks "clean", "build"

modernizer {
	failOnViolations = true
	includeTestClasses = true
}

gitProperties {
	failOnNoGitDirectory = false
	keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
	toolVersion "${checkstyleVersion}"
	configFile file("checkstyle.xml")
	maxWarnings = 10
	ignoreFailures = false
	checkstyleTest.enabled = false
	checkstyleMain.enabled = false
}

nohttp {
	source.include "build.gradle", "README.md"
}
